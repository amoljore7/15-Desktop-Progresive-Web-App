{"version":3,"sources":["Component/reducer.jsx","combineAllReducer.jsx","Component/PwaAction.jsx","Component/GetMyBox.jsx","Component/getMyLabel.jsx","Component/environment.js","Component/serviceRequests.js","Component/Pwa.jsx","App.jsx","serviceWorker.js","index.js"],"names":["INITIAL_STATE","data","allReducers","combineReducers","InsertReducer","state","arguments","length","undefined","action","type","Object","assign","PwaPageData","MailPageAction","GetMyBox","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","empData","bind","assertThisInitialized","value","widthDiv2","widthDiv1","left","react_default","a","createElement","className","style","width","widthBoxA","marginLeft","backgroundColor","Component","GetMyLabel","Domain","name","Component_GetMyBox","inputValue","percent","Channel","BASE_URL","makeServiceCall","params","console","log","JSON","stringify","serviceURL","apiName","fetch","then","data1","json","successResponse","successCallback","catch","failureResponse","failureCallback","Pwa","componentDidMount","window","matchMedia","matches","setState","successfullyInstalled","addEventListener","e","preventDefault","deferredPrompt","readyToAdd","evt","acceptedInstall","declinedInstall","addToHome","shouldShowAddButton","openWindowOrTab","onSuccessOfGetMyData","onFailureOfGetMyData","pageRefreshButton","APIConfig","configUrl","getMyData","PwaPageDataInReduxStore","_this2","prompt","userChoice","choiceResult","outcome","shouldShow","url","location","href","open","_this$props$PwaPageDa","dist","onClick","map","item","getMyLabel","connect","dispatch","bindActionCreators","PwaPageAction","App","src_Component_Pwa","storeState","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","store","createStore","combineAllReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","URL","process","origin","concat","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a3e2cda7.chunk.js","sourcesContent":["const INITIAL_STATE = {\n    data: {},\n}\nexport default function insert(state = INITIAL_STATE, action) {\n\n    switch (action.type) {\n        case 'PwaPageData':\n            const obj1 = Object.assign({}, state, { data: action.PwaPageData });\n            return obj1;\n\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport InsertReducer from './Component/reducer'\n\nconst allReducers = combineReducers({\n    InsertReducer: InsertReducer\n});\n\nexport default allReducers;","export default function MailPageAction(PwaPageData) {\n    return {\n        type: 'PwaPageData',\n        PwaPageData: PwaPageData\n    }\n}","import React, { Component } from 'react'\nimport './Pwa.css';\n\nclass GetMyBox extends Component {\n    constructor(props) {\n        super(props)\n        this.empData = this.empData.bind(this);\n    }\n\n    empData(value) {\n        var widthBoxA = 100;\n        var inputValue = value;\n        var total = 100;\n        var widthDiv1 = widthBoxA;\n        var midpoint = widthDiv1 / 2;\n        var widthDiv2 = (inputValue * midpoint) / total;\n        var left = midpoint;\n        if (inputValue < 0) {\n            widthDiv2 = widthDiv2 * (-1);\n            left = midpoint - widthDiv2;\n        }\n\n\n        if(widthDiv2 == 50){\n            widthDiv2 = 48;\n        }\n\n        return <div className=\"box-a\" style={{ width: widthBoxA + 'px' }}>\n            {\n                (value > 0) ? <div className=\"box-b\" style={{ width: widthDiv2 + 'px', marginLeft: left + 'px', backgroundColor: 'green' }}></div> : <div className=\"box-b\" style={{ width: widthDiv2 + 'px', marginLeft: left + 'px', backgroundColor: 'red' }}></div>\n            }\n        </div>\n    }\n    render() {\n        return (\n            <div className=\"col-xl-4 col-md-5 col-lg-5\">\n                {\n                    this.empData(this.props.value)\n                }\n            </div>\n        )\n    }\n}\n\nexport default GetMyBox;","import React, { Component } from 'react'\nimport GetMyBox from './GetMyBox';\nimport './Pwa.css';\n\nclass GetMyLabel extends Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        return (\n            <div>\n                <br></br>\n                {\n                    (this.props.Domain) ? \n                    <div className=\"row\">\n                            <div className=\"col-xl-4 col-md-5 col-lg-2 text-left\"> {this.props.Domain.name} </div>\n                            <GetMyBox value={this.props.Domain.inputValue} />\n                            <div className=\"col-xl-2 col-md-2 col-lg-2 text-right\"> {this.props.Domain.percent} </div>\n                    </div>\n                    : \n                    <div className=\"row\">\n                        <div className=\"col-xl-4 col-lg-5 col-md-2 text-left\"> {this.props.Channel.name} </div>\n                        <GetMyBox value={this.props.Channel.inputValue} />\n                        <div className=\"col-xl-2 col-lg-2 col-md-2 text-right \"> {this.props.Channel.percent} </div>\n                    </div>\n                }\n                \n            </div>\n        )\n    }\n}\n\nexport default GetMyLabel;","let BASE_URL =  \"http://localhost:5000\";  //lets local default\n\n//check the environment\nif(process.env.REACT_APP_ENV === \"development\"){\n    BASE_URL = \"https://demo9082206.mockable.io/\"\n}\n\nif(process.env.REACT_APP_ENV === \"production\"){\n    BASE_URL = \"https://demo6366519.mockable.io\"\n}\n\nexport {BASE_URL};","import { BASE_URL } from \"./environment\";\n\nexport function makeServiceCall(params) {\n    console.log(\"[serviceRequests] >> [makeServiceCall] >> params >>\" + JSON.stringify(params));\n    let serviceURL = BASE_URL + params.apiName;\n\n    fetch(serviceURL)\n        .then(data1 => {\n            return data1.json();\n        })\n        .then(successResponse => {\n            return params.successCallback(successResponse)\n        })\n        .catch(failureResponse => {\n            return params.failureCallback(failureResponse)\n        })\n};","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport PwaPageAction from './PwaAction'\nimport { Offline, Online } from \"react-detect-offline\";\nimport GetMyLabel from './getMyLabel.jsx';\nimport APIConfig from '../../src/serviceCall.json'\nimport { makeServiceCall } from './serviceRequests'\n\nimport './Pwa.css';\n\nclass Pwa extends Component {\n    constructor() {\n        super();\n        this.state = {\n            readyToAdd: false,\n            successfullyInstalled: false,\n            acceptedInstall: false,\n            declinedInstall: false,\n        };\n        this.addToHome = this.addToHome.bind(this);\n        this.shouldShowAddButton = this.shouldShowAddButton.bind(this);\n        this.openWindowOrTab = this.openWindowOrTab.bind(this);\n        this.onSuccessOfGetMyData = this.onSuccessOfGetMyData.bind(this);\n        this.onFailureOfGetMyData = this.onFailureOfGetMyData.bind(this);\n        this.pageRefreshButton = this.pageRefreshButton.bind(this);\n\n\n        makeServiceCall({\n            'apiName': APIConfig.configUrl.getMyData,\n            'type': 'GET',\n            'successCallback': this.onSuccessOfGetMyData,\n            'failureCallback': this.onFailureOfGetMyData\n        });\n    }\n\n    onSuccessOfGetMyData(successResponse) {\n        this.props.PwaPageDataInReduxStore(successResponse);\n    }\n\n    onFailureOfGetMyData(failureResponse) {\n        console.log(\"ServiceCall Failure\", failureResponse);\n    }\n    componentDidMount = () => {\n        // check if user is already running app from home screen\n        if (window.matchMedia('(display-mode: standalone)').matches) {\n            console.log('App is already installed and running in standalone');\n            this.setState({\n                successfullyInstalled: true,\n            });\n        } else {\n            window.addEventListener('beforeinstallprompt', e => {\n                console.log('beforeinstallprompt has fired', e);\n                // Prevent Chrome 67 and earlier from automatically showing the prompt\n                e.preventDefault();\n                // Stash the event so it can be triggered later.\n                window.deferredPrompt = e;\n                this.setState({\n                    readyToAdd: true,\n                });\n            });\n            // this event fires only when app is installed\n            window.addEventListener('appinstalled', evt => {\n                console.log('App was successfully installed');\n                this.setState({\n                    successfullyInstalled: true,\n                });\n            });\n        }\n    }\n    pageRefreshButton() {\n        makeServiceCall({\n            'apiName': APIConfig.configUrl.getMyData,\n            'type': 'GET',\n            'successCallback': this.onSuccessOfGetMyData,\n            'failureCallback': this.onFailureOfGetMyData\n        });\n        // window.location.reload();     //use to page reload. \n        console.log(\">>>>>>>pageRefreshButton>>>>>>>\");\n    }\n\n    addToHome() {\n        // Show the prompt\n        let { deferredPrompt } = window;\n        if (deferredPrompt) {\n            deferredPrompt.prompt();\n            // Wait for the user to respond to the prompt\n            deferredPrompt.userChoice.then(choiceResult => {\n                if (choiceResult.outcome === 'accepted') {\n                    console.log('User accepted the A2HS prompt');\n                    this.setState({\n                        acceptedInstall: true,\n                    });\n                } else {\n                    console.log('User dismissed the A2HS prompt');\n                    this.setState({\n                        declinedInstall: true,\n                    });\n                }\n                deferredPrompt = null;\n            });\n        }\n    }\n    shouldShowAddButton() {\n        let shouldShow =\n            this.state.readyToAdd &&\n            !this.state.successfullyInstalled &&\n            !this.state.acceptedInstall &&\n            !this.state.declinedInstall;\n        console.log('Should show add button', shouldShow);\n        return shouldShow;\n    }\n    openWindowOrTab(url = window.location.href) {\n        window.open(url, '_blank');\n    }\n\n\n    render() {\n        const { Domain, Channel } = this.props.PwaPageData;\n        return (\n            <body>\n                  <div className=\"row p-3 \">\n                    <div className=\"col-xl-4 col-lg-4 col-md-4 col-sm-4 text-left\">\n                        <Online><span className=\"btn text-white bg-success\">Online</span></Online>\n                        <Offline><span className=\"btn text-white bg-danger\">Offline</span></Offline>\n                    </div>\n\n                    <div className=\"col-xl-8 col-lg-8 col-md-8 col-sm-8 text-right\">\n                        {\n                            this.shouldShowAddButton() ? \n                            (\n                            <button type=\"button\" className=\"btn btn-primary mr-1\" onClick={this.addToHome}>Install App</button>\n                            ) : null     \n                        }\n                        <button type=\"button\" className=\"btn btn-primary mr-1\" onClick={this.pageRefreshButton}>Refresh</button>\n                    </div>\n\n                </div><br></br>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-xl-12 col-lg-12 col-md-12 col-sm-12  text-center text-white \"><h1 className=\" display-5 font-weight-bold\">TITLE GOES HERE</h1></div>\n                    </div><br></br>\n                    <div className=\"row\">\n                        <div className=\"col-xl-12 col-lg-12 col-md-12 col-sm-12  bg-white text-center text-body \"><h1 className=\"heading font-weight-bold \">ANNOUNCEMENTS GO HERE</h1></div>\n                    </div><br></br>\n                    <div className=\"row\">\n                        <div className=\"col-xl-12 col-lg-12 col-md-12 col-sm-12  bg-white text-center text-body\"><h1 className=\"heading display-4 font-weight-bold\">AVEDA TOTAL GLOBAL SALES <span className=\"text-success\">+15%</span> </h1></div>\n                    </div><br></br>\n\n                    <div className=\"row padding\">\n                        <div className=\"col-xl-6 col-lg-6 col-md-6 model-box1 text-center\">\n                            <div className=\"bg-white box1\">\n                                <h3 className=\"text-dark \">BY DOMAIN (-/+)</h3>\n                                <hr></hr>\n                                <div>\n                                    {\n                                        (Domain && (Domain.length > 0)) ?\n\n                                            <div className=\"col-lg-12\">\n                                                {\n                                                    Domain.map((item) => {\n                                                        return (\n                                                            <GetMyLabel Domain={item} />\n                                                        )\n                                                    })\n                                                }\n                                            </div>\n                                            : null\n                                    }\n                                </div>\n                            </div>\n\n                        </div>\n                        <div className=\"col-xl-6 col-lg-6 col-md-6 model-box2  text-center \">\n                            <div className=\"bg-white box2\">\n                                <h3 className=\"text-dark \">BY CHANNEL (-/+)</h3>\n                                <hr></hr>\n                                <div>\n                                    {\n                                        (Channel && (Channel.length > 0)) ?\n\n                                            <div className=\"col-lg-12\">\n                                                {Channel.map((item) => {\n                                                    return (\n                                                        <span>\n                                                            <GetMyLabel Channel={item} />\n                                                        </span>\n                                                    )\n                                                })\n                                                }\n                                            </div>\n                                            : null\n                                    }\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n\n            </body>\n        );\n    }\n}\nfunction mapStateToProps(state) {\n    return {\n        PwaPageData: state.InsertReducer.data\n    };\n}\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        PwaPageDataInReduxStore: PwaPageAction\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pwa);\n\n","import React, { Component } from 'react'\nimport Pwa from './Component/Pwa'\n\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <Pwa />\n      </div>\n    );\n  }\n}\n\nconst mapStatetoProps = (state) => {\n  return {\n    storeState: state\n  }\n}\n\nexport default connect(mapStatetoProps, dispatch => ({ dispatch }))(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport combineAllReducer from './combineAllReducer'\nimport App from './App.jsx';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(combineAllReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconst Xroot = () => {\n    return (<Provider store={store}> <App /> </Provider>);\n}\nReactDOM.render(<Xroot />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}