{"version":3,"sources":["Component/reducer.jsx","combineAllReducer.jsx","Component/PwaAction.jsx","Component/GetMyBox.jsx","Component/getMyLabel.jsx","Component/Pwa.jsx","App.jsx","serviceWorker.js","index.js"],"names":["INITIAL_STATE","data","allReducers","combineReducers","InsertReducer","state","arguments","length","undefined","action","type","Object","assign","PwaPageData","MailPageAction","GetMyBox","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","empData","bind","assertThisInitialized","value","widthDiv2","widthDiv1","left","react_default","a","createElement","className","style","width","widthBoxA","marginLeft","backgroundColor","Component","GetMyLabel","Domain","name","Component_GetMyBox","inputValue","percent","Channel","Pwa","componentDidMount","getMyData","window","matchMedia","matches","console","log","setState","successfullyInstalled","addEventListener","e","preventDefault","deferredPrompt","readyToAdd","evt","acceptedInstall","declinedInstall","addToHome","shouldShowAddButton","openWindowOrTab","_this2","fetch","APIConfig","configUrl","PWAData","then","data1","json","data2","PwaPageDataInReduxStore","catch","error","_this3","prompt","userChoice","choiceResult","outcome","shouldShow","url","location","href","open","_this$props$PwaPageDa","onClick","map","item","getMyLabel","connect","dispatch","bindActionCreators","PwaPageAction","App","src_Component_Pwa","storeState","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","store","createStore","combineAllReducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App","document","getElementById","URL","process","origin","concat","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4SAAMA,EAAgB,CAClBC,KAAM,ICEV,IAIeC,EAJKC,YAAgB,CAChCC,cDDW,WAA+C,IAA/BC,EAA+BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvBN,EAAeS,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAE1D,OAAQC,EAAOC,MACX,IAAK,cAED,OADaC,OAAOC,OAAO,GAAIP,EAAO,CAAEJ,KAAMQ,EAAOI,cAGzD,QACI,OAAOR,wDEXJ,SAASS,EAAeD,GACnC,MAAO,CACHH,KAAM,cACNG,YAAaA,eCoCNE,2BAnCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAQ,KAAAJ,IACfE,EAAAN,OAAAS,EAAA,EAAAT,CAAAQ,KAAAR,OAAAU,EAAA,EAAAV,CAAAI,GAAAO,KAAAH,KAAMH,KACDO,QAAUN,EAAKM,QAAQC,KAAbb,OAAAc,EAAA,EAAAd,CAAAM,IAFAA,uEAKXS,GACJ,IAKIC,EADWC,GAHEF,EACL,IAIRG,EAFWD,GAQf,OAXiBF,EAMA,IAEbG,EALWD,IAIXD,IAA0B,IAIvBG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,MAAO,CAAEC,MAAOC,UAErCV,EAAQ,EAAKI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,MAAO,CAAEC,MAAOR,EAAY,KAAMU,WAAYR,EAAO,KAAMS,gBAAiB,WAAoBR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,MAAO,CAAEC,MAAOR,EAAY,KAAMU,WAAYR,EAAO,KAAMS,gBAAiB,2CAKhP,OACIR,EAAAC,EAAAC,cAAA,YAEQb,KAAKI,QAAQJ,KAAKH,MAAMU,eA7BrBa,cC4BRC,cA1BX,SAAAA,EAAYxB,GAAQ,OAAAL,OAAAO,EAAA,EAAAP,CAAAQ,KAAAqB,GAAA7B,OAAAS,EAAA,EAAAT,CAAAQ,KAAAR,OAAAU,EAAA,EAAAV,CAAA6B,GAAAlB,KAAAH,KACVH,0EAGN,OACIc,EAAAC,EAAAC,cAAA,WAESb,KAAKH,MAAMyB,OACZX,EAAAC,EAAAC,cAAA,WACQF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,IAAwBd,KAAKH,MAAMyB,OAAOC,KAA1C,KACAZ,EAAAC,EAAAC,cAACW,EAAD,CAAUjB,MAAOP,KAAKH,MAAMyB,OAAOG,aACnCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,IAA2Bd,KAAKH,MAAMyB,OAAOI,QAA7C,MAGRf,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,IAAwBd,KAAKH,MAAM8B,QAAQJ,KAA3C,KACAZ,EAAAC,EAAAC,cAACW,EAAD,CAAUjB,MAAOP,KAAKH,MAAM8B,QAAQF,aACpCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAf,IAA2Bd,KAAKH,MAAM8B,QAAQD,QAA9C,cAlBCN,aCKnBQ,cACF,SAAAA,IAAc,IAAA9B,EAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAQ,KAAA4B,IACV9B,EAAAN,OAAAS,EAAA,EAAAT,CAAAQ,KAAAR,OAAAU,EAAA,EAAAV,CAAAoC,GAAAzB,KAAAH,QAgBJ6B,kBAAoB,WAChB/B,EAAKgC,YAIDC,OAAOC,WAAW,8BAA8BC,SAChDC,QAAQC,IAAI,sDACZrC,EAAKsC,SAAS,CACVC,uBAAuB,MAG3BN,OAAOO,iBAAiB,sBAAuB,SAAAC,GAC3CL,QAAQC,IAAI,gCAAiCI,GAE7CA,EAAEC,iBAEFT,OAAOU,eAAiBF,EACxBzC,EAAKsC,SAAS,CACVM,YAAY,MAIpBX,OAAOO,iBAAiB,eAAgB,SAAAK,GACpCT,QAAQC,IAAI,kCACZrC,EAAKsC,SAAS,CACVC,uBAAuB,QAxCnCvC,EAAKZ,MAAQ,CACTwD,YAAY,EACZL,uBAAuB,EACvBO,iBAAiB,EACjBC,iBAAiB,GAGrB/C,EAAKgD,UAAYhD,EAAKgD,UAAUzC,KAAfb,OAAAc,EAAA,EAAAd,CAAAM,IACjBA,EAAKiD,oBAAsBjD,EAAKiD,oBAAoB1C,KAAzBb,OAAAc,EAAA,EAAAd,CAAAM,IAC3BA,EAAKkD,gBAAkBlD,EAAKkD,gBAAgB3C,KAArBb,OAAAc,EAAA,EAAAd,CAAAM,IAEvBA,EAAKgC,UAAYhC,EAAKgC,UAAUzB,KAAfb,OAAAc,EAAA,EAAAd,CAAAM,IAbPA,2EA+CF,IAAAmD,EAAAjD,KAERkD,MAAMC,EAAUC,UAAUC,SACrBC,KAAK,SAAAC,GACF,OAAOA,EAAMC,SAEhBF,KAAK,SAAAG,GACFR,EAAKpD,MAAM6D,wBAAwBD,KAGtCE,MAAM,SAAAC,GAAK,OAAI1B,QAAQC,IAAIyB,yCAGxB,IAAAC,EAAA7D,KAEFyC,EAAmBV,OAAnBU,eACFA,IACAA,EAAeqB,SAEfrB,EAAesB,WAAWT,KAAK,SAAAU,GACE,aAAzBA,EAAaC,SACb/B,QAAQC,IAAI,iCACZ0B,EAAKzB,SAAS,CACVQ,iBAAiB,MAGrBV,QAAQC,IAAI,kCACZ0B,EAAKzB,SAAS,CACVS,iBAAiB,KAGzBJ,EAAiB,sDAKzB,IAAIyB,EACAlE,KAAKd,MAAMwD,aACV1C,KAAKd,MAAMmD,wBACXrC,KAAKd,MAAM0D,kBACX5C,KAAKd,MAAM2D,gBAEhB,OADAX,QAAQC,IAAI,yBAA0B+B,GAC/BA,4CAEiC,IAA5BC,EAA4BhF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtB4C,OAAOqC,SAASC,KAClCtC,OAAOuC,KAAKH,EAAK,2CAIZ,IAAAI,EACuBvE,KAAKH,MAAMH,YAA/B4B,EADHiD,EACGjD,OAAQK,EADX4C,EACW5C,QAChB,OACIhB,EAAAC,EAAAC,cAAA,YAEIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACNd,KAAK+C,sBACFpC,EAAAC,EAAAC,cAAA,UAAQ2D,QAASxE,KAAK8C,WAClBnC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,gBAEJ,KAERH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,8BAEzBF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBH,EAAAC,EAAAC,cAAA,oCAC/BF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAQH,EAAAC,EAAAC,cAAA,sCAA6BF,EAAAC,EAAAC,cAAA,oBAA7B,KAAvB,OACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,mBACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAESS,GAAWA,EAAOlC,OAAS,EAExBuB,EAAAC,EAAAC,cAAA,WACKS,EAAOmD,IAAI,SAACC,GACT,OACI/D,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAC8D,EAAD,CAAYrD,OAAQoD,QAMlC,OAIlB/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,oBACAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAEUc,GAAYA,EAAQvC,OAAS,EAE9BuB,EAAAC,EAAAC,cAAA,WACKc,EAAQ8C,IAAI,SAACC,GACV,OACI/D,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAC8D,EAAD,CAAYhD,QAAS+C,QAMnC,gBAvJjBtD,aA4KHwD,kBAXf,SAAyB1F,GACrB,MAAO,CACHQ,YAAaR,EAAMD,cAAcH,OAGzC,SAA4B+F,GACxB,OAAOC,YAAmB,CACtBpB,wBAAyBqB,GAC1BF,IAGQD,CAA6ChD,GChLtDoD,mLAGF,OACErE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoE,EAAD,cALU7D,aAiBHwD,cANS,SAAC1F,GACvB,MAAO,CACLgG,WAAYhG,IAIwB,SAAA2F,GAAQ,MAAK,CAAEA,aAAxCD,CAAqDI,GCV9DG,SAAcC,QACW,cAA7BrD,OAAOqC,SAASiB,UAEe,UAA7BtD,OAAOqC,SAASiB,UAEhBtD,OAAOqC,SAASiB,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTlC,KAAK,SAAAuC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7G,QACfwG,UAAUC,cAAcO,YAI1BhE,QAAQC,IACN,iHAKEsD,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB3D,QAAQC,IAAI,sCAGRsD,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5BlC,MAAM,SAAAC,GACL1B,QAAQ0B,MAAM,4CAA6CA,KCtFjE,IAAMyC,EAAQC,YAAYC,EAAmBxE,OAAOyE,8BAAgCzE,OAAOyE,gCAK3FC,IAASC,OAAO/F,EAAAC,EAAAC,cAHF,WACV,OAAQF,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,CAAUN,MAAOA,GAAjB,IAAyB1F,EAAAC,EAAAC,cAAC+F,EAAD,MAAzB,MAEI,MAAWC,SAASC,eAAe,SDO5C,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,mBAAwBjF,OAAOqC,SAASC,MACpD4C,SAAWlF,OAAOqC,SAAS6C,OAIvC,OAGFlF,OAAOO,iBAAiB,OAAQ,WAC9B,IAAMkD,EAAK,GAAA0B,OAAMF,mBAAN,sBAEP7B,GAgEV,SAAiCK,EAAOC,GAEtCvC,MAAMsC,GACHlC,KAAK,SAAA6D,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAMnE,KAAK,SAAAuC,GACjCA,EAAa6B,aAAapE,KAAK,WAC7BvB,OAAOqC,SAASuD,aAKpBpC,EAAgBC,EAAOC,KAG1B9B,MAAM,WACLzB,QAAQC,IACN,mEArFAyF,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAMnE,KAAK,WACjCpB,QAAQC,IACN,gHAMJoD,EAAgBC,EAAOC,MCjC/BE","file":"static/js/main.4fca2780.chunk.js","sourcesContent":["const INITIAL_STATE = {\n    data: {},\n}\nexport default function insert(state = INITIAL_STATE, action) {\n\n    switch (action.type) {\n        case 'PwaPageData':\n            const obj1 = Object.assign({}, state, { data: action.PwaPageData });\n            return obj1;\n\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport InsertReducer from './Component/reducer'\n\nconst allReducers = combineReducers({\n    InsertReducer: InsertReducer\n});\n\nexport default allReducers;","export default function MailPageAction(PwaPageData) {\n    return {\n        type: 'PwaPageData',\n        PwaPageData: PwaPageData\n    }\n}","import React, { Component } from 'react'\nimport './Pwa.css';\n\nclass GetMyBox extends Component {\n    constructor(props) {\n        super(props)\n        this.empData = this.empData.bind(this);\n    }\n\n    empData(value) {\n        var widthBoxA = 100;\n        var inputValue = value;\n        var total = 100;\n        var widthDiv1 = widthBoxA;\n        var midpoint = widthDiv1 / 2;\n        var widthDiv2 = (inputValue * midpoint) / total;\n        var left = midpoint;\n        if (inputValue < 0) {\n            widthDiv2 = widthDiv2 * (-1);\n            left = midpoint - widthDiv2;\n        }\n\n        return <div className=\"box-a\" style={{ width: widthBoxA + 'px' }}>\n            {\n                (value > 0) ? <div className=\"box-b\" style={{ width: widthDiv2 + 'px', marginLeft: left + 'px', backgroundColor: 'green' }}></div> : <div className=\"box-b\" style={{ width: widthDiv2 + 'px', marginLeft: left + 'px', backgroundColor: 'red' }}></div>\n            }\n        </div>\n    }\n    render() {\n        return (\n            <span>\n                {\n                    this.empData(this.props.value)\n                }\n            </span>\n        )\n    }\n}\n\nexport default GetMyBox;","import React, { Component } from 'react'\nimport GetMyBox from './GetMyBox';\nimport './Pwa.css';\n\nclass GetMyLabel extends Component {\n    constructor(props) {\n        super(props)\n    }\n    render() {\n        return (\n            <div>\n                {\n                    (this.props.Domain) ? \n                    <div>\n                            <div className=\"name\"> {this.props.Domain.name} </div>\n                            <GetMyBox value={this.props.Domain.inputValue} />\n                            <div className=\"percent\"> {this.props.Domain.percent} </div>\n                    </div>\n                    : \n                    <div>\n                        <div className=\"name\"> {this.props.Channel.name} </div>\n                        <GetMyBox value={this.props.Channel.inputValue} />\n                        <div className=\"percent\"> {this.props.Channel.percent} </div>\n                    </div>\n                }\n                \n            </div>\n        )\n    }\n}\n\nexport default GetMyLabel;","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport PwaPageAction from './PwaAction'\nimport APIConfig from '../../src/urls.json'\nimport { Offline, Online } from \"react-detect-offline\";\nimport GetMyLabel from './getMyLabel.jsx';\nimport './Pwa.css';\n\nclass Pwa extends Component {\n    constructor() {\n        super();\n        this.state = {\n            readyToAdd: false,\n            successfullyInstalled: false,\n            acceptedInstall: false,\n            declinedInstall: false,\n\n        };\n        this.addToHome = this.addToHome.bind(this);\n        this.shouldShowAddButton = this.shouldShowAddButton.bind(this);\n        this.openWindowOrTab = this.openWindowOrTab.bind(this);\n       \n        this.getMyData = this.getMyData.bind(this);\n        \n\n    }\n    componentDidMount = () => {\n        this.getMyData()\n\n\n        // check if user is already running app from home screen\n        if (window.matchMedia('(display-mode: standalone)').matches) {\n            console.log('App is already installed and running in standalone');\n            this.setState({\n                successfullyInstalled: true,\n            });\n        } else {\n            window.addEventListener('beforeinstallprompt', e => {\n                console.log('beforeinstallprompt has fired', e);\n                // Prevent Chrome 67 and earlier from automatically showing the prompt\n                e.preventDefault();\n                // Stash the event so it can be triggered later.\n                window.deferredPrompt = e;\n                this.setState({\n                    readyToAdd: true,\n                });\n            });\n            // this event fires only when app is installed\n            window.addEventListener('appinstalled', evt => {\n                console.log('App was successfully installed');\n                this.setState({\n                    successfullyInstalled: true,\n                });\n            });\n        }\n    }\n    getMyData() {\n\n        fetch(APIConfig.configUrl.PWAData)\n            .then(data1 => {\n                return data1.json();\n            })\n            .then(data2 => {\n                this.props.PwaPageDataInReduxStore(data2);\n                // console.log(\">>>CheckPoint>>>Json Stringify\",JSON.stringify(data2));\n            })\n            .catch(error => console.log(error))\n    }\n\n    addToHome() {\n        // Show the prompt\n        let { deferredPrompt } = window;\n        if (deferredPrompt) {\n            deferredPrompt.prompt();\n            // Wait for the user to respond to the prompt\n            deferredPrompt.userChoice.then(choiceResult => {\n                if (choiceResult.outcome === 'accepted') {\n                    console.log('User accepted the A2HS prompt');\n                    this.setState({\n                        acceptedInstall: true,\n                    });\n                } else {\n                    console.log('User dismissed the A2HS prompt');\n                    this.setState({\n                        declinedInstall: true,\n                    });\n                }\n                deferredPrompt = null;\n            });\n        }\n    }\n    shouldShowAddButton() {\n        let shouldShow =\n            this.state.readyToAdd &&\n            !this.state.successfullyInstalled &&\n            !this.state.acceptedInstall &&\n            !this.state.declinedInstall;\n        console.log('Should show add button', shouldShow);\n        return shouldShow;\n    }\n    openWindowOrTab(url = window.location.href) {\n        window.open(url, '_blank');\n    }\n  \n\n    render() {\n        const { Domain, Channel } = this.props.PwaPageData;\n        return (\n            <body>\n                 \n                <div className=\"container\">\n                        {this.shouldShowAddButton() ? (\n                            <button onClick={this.addToHome}>\n                                <h3 className=\"Install-App\">Install App</h3>\n                            </button>\n                        ) : null}\n                   \n                    <div className=\"heading\"><h1>TITLE GOES HERE</h1></div>\n                   \n                    <div className=\"Announcement\" ><h1>ANNOUNCEMENTS GO HERE</h1></div>\n                    <div className=\"Title\"><h1>AVEDA TOTAL GLOBAL SALES <span>+15%</span> </h1>   </div>\n                    <div className=\"model-box1\">\n                        <h3 className=\"title-box1\">BY DOMAIN (-/+)</h3>\n                        <hr></hr>\n                        <div>\n                            {\n                                (Domain && (Domain.length > 0)) ?\n\n                                    <div>\n                                        {Domain.map((item) => {\n                                            return (\n                                                <span>\n                                                    <GetMyLabel Domain={item} />\n                                                </span>\n                                            )\n                                        })\n                                        }\n                                    </div>\n                                    : null\n                            }\n                        </div>\n                    </div>\n                    <div className=\"model-box2\">\n                        <h3 className=\"title-box2\">BY CHANNEL (-/+)</h3>\n                        <hr></hr>\n                        <div>\n                            {\n                                 (Channel && (Channel.length > 0)) ?\n\n                                 <div>\n                                     {Channel.map((item) => {\n                                         return (\n                                             <span>\n                                                 <GetMyLabel Channel={item} />\n                                             </span>\n                                         )\n                                     })\n                                     }\n                                 </div>\n                                 : null\n                            }\n                        </div>\n                    </div>\n                </div>\n                \n            </body>\n        );\n    }\n}\nfunction mapStateToProps(state) {\n    return {\n        PwaPageData: state.InsertReducer.data\n    };\n}\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        PwaPageDataInReduxStore: PwaPageAction\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pwa);\n\n","import React, { Component } from 'react'\nimport Pwa from './Component/Pwa'\n\nimport { connect } from 'react-redux';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <Pwa />\n      </div>\n    );\n  }\n}\n\nconst mapStatetoProps = (state) => {\n  return {\n    storeState: state\n  }\n}\n\nexport default connect(mapStatetoProps, dispatch => ({ dispatch }))(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport combineAllReducer from './combineAllReducer'\nimport App from './App.jsx';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(combineAllReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconst Xroot = () => {\n    return (<Provider store={store}> <App /> </Provider>);\n}\nReactDOM.render(<Xroot />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}